<?php/* ------------------------------------------------------------------------------------- *  Improve debugging * *  Turn on all debugging for developing purpose * ------------------------------------------------------------------------------------- */error_reporting(E_ALL);ini_set('display_errors', 1);/* ------------------------------------------------------------------------------------- *  Allow huge memory * *  Since a lot of data is handled, the allowed memory in increased significantly * ------------------------------------------------------------------------------------- */ini_set('memory_limit', '1024M');set_time_limit(600);/* ------------------------------------------------------------------------------------- *  Config * ------------------------------------------------------------------------------------- */define('MINIMUM_NUMBER_OF_FUNDING_ROUNDS', 2);define('MINIMUM_NUMBER_DATAPOINTS', 3);/* -------------------------------------------------------------------------------------*  Import the data**  Import the data from Zephyr and make it readable in PHP* ------------------------------------------------------------------------------------- */descriptive('Import the data');// Import Excel data (csv)$code = file_get_contents('Zephyr_Export_22april_natt.csv');// Convert csv to arrays$rows = explode('', $code);foreach ($rows as &$row) {    $row = explode(';', $row);}// Remove the table headingunset($rows[0]);/* ------------------------------------------------------------------------------------- *  Restructure the data into funding rounds * ------------------------------------------------------------------------------------- */descriptive('Restructure the into rounds');$rounds = [];foreach ($rows as $key => &$row) {    echo '<pre>';    print_r($rows);    die();    if (trim($row[10]) == '6799') {        $sic_6799 = true;    } else {        $sic_6799 = false;    }    if (!empty($row[2]))        $rounds[$row[1]]['name'] = $row[2];    $rounds[$row[1]]['type'] = $row[3];    $rounds[$row[1]]['dealnumber'] = $row[1];    if (!empty($row[4]))        $rounds[$row[1]]['acquirers'][] = ['name' => $row[4], 'type' => $row[6], 'sic_6799' => $sic_6799];    if (!empty($row[5]))        $rounds[$row[1]]['vendors'][] = $row[5];}/* ------------------------------------------------------------------------------------ *  Restructure the data into rounds * ------------------------------------------------------------------------------------- */descriptive('Restructure the rounds into target companies');$targets = [];foreach ($rounds as $key => $round) {    $targetKey = minimizeCompanyName($round['name']);    unset($round['name']);    $round['acquirers'] = (isset($round['acquirers'])) ? $round['acquirers'] : [];    $round['vendors'] = (isset($round['vendors'])) ? $round['vendors'] : [];    $targets[$targetKey]['rounds'][$key] = $round;}/* ------------------------------------------------------------------------------------- *  Divide rounds into developing capital or exit rounds * ------------------------------------------------------------------------------------- */descriptive('Divide rounds into developing capital or exit rounds');$exitRoundTypes = [];$excludes = ['Minority', 'buyback', 'Capital Increase'];foreach ($targets as $targetKey => $target) {    foreach ($target['rounds'] as $roundKey => $round) {        // If there are vendors in the round, it should be classified as an exit round...        if (count($round['vendors'])) {            $include = true;            // ..unless the round type is excluded            foreach ($excludes as $exclude) {                if (stripos($round['type'], $exclude) !== false) {                    $include = false;                }            }            if ($include) {                $exitRoundTypes[] = $round['type'];                $targets[$targetKey]['exitRounds'][] = $round;            }        } else {            $targets[$targetKey]['fundingRounds'][] = $round;        }    }    unset($targets[$targetKey]['rounds']);}calculate($targets, 'Initial data set');/* ------------------------------------------------------------------------------------- *  Remove acquirers who is business angles* ------------------------------------------------------------------------------------- */descriptive('Find all business angles');$businessAngles = [];foreach ($targets as $targetKey => $target) {    if (isset($target['fundingRounds'])) {        foreach ($target['fundingRounds'] as $round) {            foreach ($round['acquirers'] as $acquirer) {                if (startsWith($acquirer['name'], 'MR ') || startsWith($acquirer['name'], 'MS ') || startsWith($acquirer['name'], 'MRS ')) {                    $businessAngles[] = $acquirer['name'];                }            }        }    }}/* ------------------------------------------------------------------------------------- *  Find acquirers without reinvestments * -------------------------------------------------------------------------------------descriptive('Find acquirers without reinvestments');$aquirersDoingReinvestment = [];$aquirersNotDoingReinvestment = [];foreach ($targets as $targetKey => $target) {    $targetAquirers = [];    if (isset($target['fundingRounds'])) {        foreach ($target['fundingRounds'] as $round) {            foreach ($round['acquirers'] as $acquirer) {                $targetAquirers[] = $acquirer['name'];            }        }        $targetAquirersCount = array_count_values($targetAquirers);        foreach ($targetAquirersCount as $aquire => $count) {            if ($count > 1) {                $aquirersDoingReinvestment[] = $aquire;            } else {                $aquirersNotDoingReinvestment[] = $aquire;            }        }    }}$aquirersDoingReinvestment = array_unique($aquirersDoingReinvestment);$aquirersNotDoingReinvestment = array_unique($aquirersNotDoingReinvestment);info('<b>Acquirers doing reinvestmenst: </b>' . count($aquirersDoingReinvestment) . '<br> <b>Not doing reinvestments:</b> ' . count($aquirersNotDoingReinvestment));*//* ------------------------------------------------------------------------------------- *  Remove all target companies with too few rounds * ------------------------------------------------------------------------------------- */filter('Remove all target companies with too few rounds');foreach ($targets as $key => $target) {    if (!isset($target['fundingRounds'])) {        unset($targets[$key]);        continue;    }    if (count($target['fundingRounds']) < MINIMUM_NUMBER_OF_FUNDING_ROUNDS) {        unset($targets[$key]);    }}/* ------------------------------------------------------------------------------------- *  Remove all target companies with too few rounds * ------------------------------------------------------------------------------------- */filter('Remove all target companies missing meta data in one or more rounds');foreach ($targets as $targetKey => $target) {    foreach ($target['fundingRounds'] as $round) {        if (count($round['acquirers']) == 0 && count($round['vendors']) == 0) {            unset($targets[$targetKey]);        }    }}calculate($targets, 'After filtering companies with to few rounds including info (less than ' . MINIMUM_NUMBER_OF_FUNDING_ROUNDS . ')');/* ------------------------------------------------------------------------------------- *  Remove all acquirers that is angles * ------------------------------------------------------------------------------------- */filter('Remove all acquirers that is angles (' . count($businessAngles) . ')');$sic = [];$notSic = [];$businessAngels = [];$sicInv = 0;$notSicInv = 0;$businessAngelsInv = 0;foreach ($targets as $targetKey => $target) {    if (isset($target['fundingRounds'])) {        foreach ($target['fundingRounds'] as $roundKey => $round) {            foreach ($round['acquirers'] as $acquirerKey => $acquirer) {                if (in_array($acquirer['name'], $businessAngles)) {                    unset($targets[$targetKey]['fundingRounds'][$roundKey]['acquirers'][$acquirerKey]);                    $businessAngels[] = $acquirer['name'];                    $businessAngelsInv++;                } elseif (!$acquirer['sic_6799']) {                    unset($targets[$targetKey]['fundingRounds'][$roundKey]['acquirers'][$acquirerKey]);                    $notSic[] = $acquirer['name'];;                    $notSicInv++;                } else {                    $sic[] = $acquirer['name'];;                    $sicInv++;                }            }        }    }}$sic = count(array_unique($sic));$notSic = count(array_unique($notSic));$businessAngels = count(array_unique($businessAngels));info(    "<b>Business angles: </b> $businessAngels ($businessAngelsInv) <br>    <b>Not SIC: </b>  $notSic ($notSicInv) <br>    <b>SIC: </b> $sic ($sicInv) <br>");calculate($targets, 'After removing all unprofessionals');/* ------------------------------------------------------------------------------------- *  Degree of reinvestment * ------------------------------------------------------------------------------------- */descriptive('Define each target companies\' degree of reinvestments');$tooLittleData = 0;$insideRoundsCount = 0;$outsideRoundsCount = 0;foreach ($targets as $targetKey => &$target) {    $reinvestments = 0;    $reinvestmentsOpportunities = 0;    $aquirersWithInsights = [];    foreach ($target['fundingRounds'] as $roundKey => $round) {        if (isset($lastRoundKey) && isset($target['fundingRounds'][$lastRoundKey]['acquirers'])) {            foreach ($target['fundingRounds'][$lastRoundKey]['acquirers'] as $aquirer) {                $aquirersPreviousRound[] = $aquirer['name'];            }        } else {            $aquirersPreviousRound = [];        }        $reinvestmentsOpportunities = $reinvestmentsOpportunities + count($aquirersPreviousRound);        $insideRound = true;        foreach ($round['acquirers'] as $aquirer) {            // Investeraren is new            if (!in_array($aquirer['name'], $aquirersWithInsights)) {                $insideRound = false;            }        }        if ($insideRound) {            $insideRoundsCount++;            unset($target['fundingRounds'][$roundKey]);            continue; // Do not count this deal        } else {            $outsideRoundsCount++;        }        foreach ($round['acquirers'] as $aquirer) {            if (in_array($aquirer['name'], $aquirersPreviousRound)) {                $reinvestments++;            } else {                $aquirersPreviousRound[] = $aquirer['name'];            }        }        $aquirersWithInsights = array_merge($aquirersWithInsights, $aquirersPreviousRound);        $aquirersPreviousRound = []; // Clear all $aquirersPreviousRound        $lastRoundKey = $roundKey;    }    $target['reinvestments'] = $reinvestments;    $target['reinvestmentsOpportunities'] = $reinvestmentsOpportunities;    unset($lastRoundKey);    $aquirersWithInsights = []; // Unset}info("<b>Inside rounds:</b> $insideRoundsCount (" . ($insideRoundsCount / ($insideRoundsCount + $outsideRoundsCount)) . ")<br>      <b>Outside rounds:</b> $outsideRoundsCount (" . ($outsideRoundsCount / ($insideRoundsCount + $outsideRoundsCount)) . ")");calculate($targets, 'After removing inside rounds');foreach ($targets as $targetKey => &$target) {    if ($target['reinvestmentsOpportunities'] > MINIMUM_NUMBER_DATAPOINTS)        $target['reinvestmentsDegree'] = round($target['reinvestments'] / $target['reinvestmentsOpportunities'], 3);    else {        $tooLittleData++;        unset($targets[$targetKey]);    }}filter('Remove companies with too too few data points (' . $tooLittleData . ')');calculate($targets, 'After removing companies with too few data points rounds  (less than ' . (MINIMUM_NUMBER_DATAPOINTS + 1) .')');/* ------------------------------------------------------------------------------------- *  Success * ------------------------------------------------------------------------------------- */descriptive('Define each target companies\' success or no sucess');foreach ($targets as &$target) {    $success = 0;    if (isset($target['exitRounds'])) {        if (count($target['exitRounds'])) {            $success = 1;        }    } else {        $target['exitRounds'] = [];    }    $target['success'] = $success;}// -------------------------------------------------------------------------------------//     PRINT THE RESULT// -------------------------------------------------------------------------------------echo '<table border="1">';echo '<thead>';echo '<tr>';echo '<th>name</th>';echo '<th>reinvestments</th>';echo '<th>reinvestmentsOpportunities</th>';echo '<th>reinvestmentdegree</th>';echo '<th>success</th>';echo '<th>fundingRounds</th>';echo '<th>exitRounds</th>';echo '</tr>';echo '</thead>';foreach ($targets as $name => $target) {    echo '<tr>';    echo '<td>' . $name . '</td>';    echo '<td>' . $target['reinvestments'] . '</td>';    echo '<td>' . $target['reinvestmentsOpportunities'] . '</td>';    echo '<td>' . $target['reinvestmentsDegree'] . '</td>';    echo '<td>' . $target['success'] . '</td>';    echo '<td>' . count($target['fundingRounds']) . '</td>';    echo '<td>' . count($target['exitRounds']) . '</td>';    echo '</tr>';}echo '</table>';function calculate($targets, $title = ''){    $numberOfTargets = count($targets);    $numberOfRounds = 0;    $numberOfAcquirers = 0;    foreach ($targets as $target) {        if (isset($target['fundingRounds'])) {            foreach ($target['fundingRounds'] as $round) {                $numberOfAcquirers += count($round['acquirers']);            }            $numberOfRounds += count($target['fundingRounds']);        }    }    echo '<div style="padding:20px; background: #aef2e9; border: solid 2px #4ecdbc; margin-bottom: 10px;"><b>COUNT - ' . $title . '</b><br>    Targets: ' . $numberOfTargets . '<br>    Rounds: ' . $numberOfRounds . '<br>    Acquirers: ' . $numberOfAcquirers . '<br>    </div>';}function minimizeCompanyName($name){    return $name;    return strtolower(preg_replace("/[^a-zA-Z]+/", "", $name));}function info($str){    echo '<div style="padding:20px; background: #b0d7fc; border: solid 2px #7aacdb; margin-bottom: 10px;">' . $str . '</div>';}function descriptive($str){    echo '<div style="padding:10px 20px; background: #f1f1f1; border: solid 2px #cccccc; margin-bottom: 10px;">' . $str . '</div>';}function filter($str){    echo '<div style="padding:10px 20px; background: #fcb0b2; border: solid 2px #ff5256; margin-bottom: 10px;">' . $str . '</div>';}function startsWith($haystack, $needle){    // search backwards starting from haystack length characters from the end    return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;}function print_pre($str){    echo '<div style="padding:10px 20px; background: #f7f7f7; border: solid 2px #e3e3e3; margin-bottom: 10px; max-height: 300px; overflow: scroll">';    echo '<pre>';    print_r($str);    echo '</pre>';    echo '</div>';}